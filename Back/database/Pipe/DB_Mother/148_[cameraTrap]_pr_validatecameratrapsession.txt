CREATE  PROCEDURE [dbo].[pr_ValidateCameraTrapSession] 
	@fk_sensor INT,
	@fk_monitoredsite INT,
	@fk_equipement INT,
	@nb_insert int OUTPUT,
	@exist int output, 
	@error int output
AS
BEGIN
	BEGIN TRY
	BEGIN TRAN
		-- TODO Gestion des exceptions + Ajout de transactions
		/*DECLARE @fk_sensor INT,
		@fk_equipement INT,
		@fk_monitoredsite INT

		SET @fk_sensor=3232
		SET @FK_MonitoredSite =17
		SET @fk_equipement=10453*/
		
		IF OBJECT_ID('tempdb..#CamTrapID') IS NOT NULL
			DROP TABLE #CamTrapID
		

			-- Récupération des IDS
		select pk_id as ID into #CamTrapID
		from V_dataCamTrap_With_equipSite where fk_sensor = @fk_sensor AND FK_MonitoredSite = @fk_monitoredsite AND sessionID = @fk_equipement


		--validation forcé 
		UPDATE [V_TcameraTrap]
		SET [validated] = 8
		where pk_id in (select * from #CamTrapID) AND (validated IS NULL or validated = 1 )

		-- TODO Gestion si pas de session
		IF NOT EXISTS (SELECT * from #CamTrapID)
		RETURN

		--select * from V_dataCamTrap_With_equipSite  where pk_id  in (select ID FROM #CamTrapID) 


		-- Récupération des Tags
		IF OBJECT_ID('tempdb..#TagvsCamTrap') IS NOT NULL
			DROP TABLE #TagvsCamTrap

		select t.pk_id,N.C.value('.','varchar(100)') Tag into #TagvsCamTrap
		FROM V_TcameraTrap T
		CROSS APPLY tags.nodes('//TAGS/TAG') N(C)
		WHERE t.pk_id in (select ID FROM #CamTrapID)

		--select * from #TagvsCamTrap

		-- Création des tags manquants
		INSERT INTO [Tags]
			   ([Label])
		select distinct Tag from #TagvsCamTrap CT
		where not exists (select * from [Tags] T WHERE t.Label = CT.Tag) 


			----------------- INSERTIONS-------------------

		INSERT INTO [dbo].[Photos]
			   (
				[Path]
			   ,[FileName]
			   ,[Date]
			   ,[Fk_MonitoredSite]
			   ,[old_id]
			   ,[Statut]
			   ,[Note]
			   )

		select t.path,T.name,t.date_creation, v.FK_MonitoredSite,t.pk_id,T.validated, T.Note
		from V_TcameraTrap T JOIN V_dataCamTrap_With_equipSite V on v.pk_id = t.pk_id
		WHERE t.pk_id in (select CID.ID from #CamTrapID CID )
		and (T.validated & 10) > 0
		--binary weight 1 underterminate 2 accepted 4 refused 8 forced validate

		INSERT INTO [dbo].[PhotosTags]
			   ([Fk_Tags]
			   ,[Fk_Photos])
		select T.ID,p.ID from [Photos] P  JOIN #TagvsCamTrap TCT ON TCT.pk_id = P.old_id JOIN Tags T ON t.Label = TCT.Tag 
		


			----------------- fix la session -------------------

		--fix le checked a 1 pour valider la session
		UPDATE [V_TcameraTrap]
		SET [checked] = 1
		WHERE pk_id in (select ID from #CamTrapID)

		

		-- Test gestion erreur RAISERROR (' Erreur générée', -- Message text.  15, -- Severity,    1)

	IF @@TRANCOUNT > 0 
			COMMIT TRAN
			set @nb_insert = @@TRANCOUNT
			set @exist = 0
			set @error = 0
	--

	END TRY
    BEGIN CATCH
        print 'CATCH'
        print @@TRANCOUNT
        IF @@TRANCOUNT > 0  ROLLBACK TRAN;
        print @@TRANCOUNT
                   
        DECLARE @ErrorMessage NVARCHAR(4000);
        DECLARE @ErrorSeverity INT;
        DECLARE @ErrorState INT;
                   
        SELECT
                @ErrorMessage = ERROR_MESSAGE(),
                @ErrorSeverity = ERROR_SEVERITY(),
                @ErrorState = ERROR_STATE();
                   
        RAISERROR (@ErrorMessage, -- Message text.
                            @ErrorSeverity, -- Severity.
                            @ErrorState -- State.
                            );
    END CATCH

	--select path,name,validated from V_TcameraTrap where pk_id in (select ID from #CamTrapID)
END


INSERT INTO [dbo].[TVersion] (TVer_FileName,TVer_Date,TVer_DbName) VALUES ('148_[cameraTrap]_pr_validatecameratrapsession',GETDATE(),(SELECT db_name()))


GO
