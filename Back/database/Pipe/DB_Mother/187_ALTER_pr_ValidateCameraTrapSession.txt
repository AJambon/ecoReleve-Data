ALTER PROCEDURE [dbo].[pr_ValidateCameraTrapSession] 
	@fk_sensor INT,
	@fk_monitoredsite INT,
	@fk_equipement INT,
	@idForAround INT,
	@minID INT,
	@maxID INT,
	@minStatus INT,
	@maxStatus INT,
	@nb_insert int OUTPUT/*
	@exist int output, 
	@error int output*/
AS
BEGIN
	BEGIN TRY
	BEGIN TRAN
		SET @nb_insert = -1;
		SET @minID = 0;
		SET @maxID = 0;
		SET @minStatus = NULL;
		SET @maxStatus = NULL;
		/**
		STATUS_REMINDER
		+---------------+---------------+
		|	VALIDATED	|	MEANING		|
		+---------------+---------------+
		|	NULL		|	NOT SEE		|	
		+---------------+---------------+
		|		1		|		SEE		|
		+---------------+---------------+
		|		2		|	VALIDATED	|	
		+---------------+---------------+
		|		4		|	REFUSED		|		
		+---------------+---------------+
		|		8		|	FORCED		|
		+---------------+---------------+	
		**/
		-- TODO Gestion des exceptions + Ajout de transactions
		/*DECLARE @fk_sensor INT,
		@fk_equipement INT,
		@fk_monitoredsite INT

		SET @fk_sensor=3232
		SET @FK_MonitoredSite =17
		SET @fk_equipement=10453*/
		
		IF OBJECT_ID('tempdb..#CamTrapIDForSession') IS NOT NULL
			DROP TABLE #CamTrapIDForSession
		
		-- Construit la table #CamTrapIDForSession représentant la session
		PRINT('For Session ID :'+CONVERT(VARCHAR , @fk_equipement)+' ( with fk_sensor :'+CONVERT(VARCHAR, @fk_sensor)+'and fk_monitoredSite : '+CONVERT(VARCHAR, @fk_monitoredSite)+' )')
		PRINT('Nb photos id in session not yet checked : ')
		SELECT 
		[pk_id] AS [ID],
		[validated] AS [status],
		[date_creation] AS [date_creation]
		INTO #CamTrapIDForSession
		FROM [V_dataCamTrap_With_equipSite] 
		WHERE 
		[fk_sensor] = @fk_sensor 
		AND [FK_MonitoredSite] = @fk_monitoredsite
		AND [sessionID] = @fk_equipement
		AND [checked] IS NULL
		ORDER BY [date_creation] ASC

		IF OBJECT_ID('tempdb..#CamTrapIDValidated') IS NOT NULL
			DROP TABLE #CamTrapIDValidated

		---- Construit la table des photos valider
		SELECT 
		*
		INTO #CamTrapIDValidated
		FROM #CamTrapIDForSession
		WHERE [status] = 2

		---- on va boucler sur chacune des photos validées pour changer le status des photos qui était autour de cette photo validé
		SELECT TOP 1 @idForAround = [ID] FROM #CamTrapIDValidated 
		SET @minID = 0
		SET @maxID = 0
		SET @minStatus = NULL
		SET @maxStatus = NULL

		WHILE ( @@ROWCOUNT > 0 )
		BEGIN
		-- récupére la premiere  photo dont la date de creation est inférieur à la photo validé et dont le status n'est pas validé ou forcé (2 ou 8)
		SELECT TOP 1
		@minID = [ID],
		@minStatus = [status]
		FROM #CamTrapIDForSession
		WHERE  
		[date_creation] < ( SELECT [date_creation] FROM #CamTrapIDForSession WHERE [ID] = @idForAround)
		ORDER BY [date_creation] DESC
		
		
		-- récupére la premiere  photo dont la date de creation est supérieur à la photo validé et dont le status n'est pas validé ou forcé (2 ou 8)
		SELECT TOP 1
		@maxID = [ID],
		@maxStatus = [status]
		FROM #CamTrapIDForSession
		WHERE  
		[date_creation] > ( SELECT [date_creation] FROM #CamTrapIDForSession WHERE [ID] = @idForAround)
		ORDER BY [date_creation] ASC

		IF @maxID > 0 AND @maxStatus = 4
		BEGIN
			UPDATE [V_TcameraTrap]
			SET [validated] = 8
			WHERE [pk_id] = @maxID
			UPDATE #CamTrapIDForSession
			SET [status] = 8
			WHERE [ID] = @maxID
		END
		IF @minID > 0 AND @minStatus = 4
		BEGIN
			UPDATE [V_TcameraTrap]
			SET [validated] = 8
			WHERE [pk_id] = @minID
			UPDATE #CamTrapIDForSession
			SET [status] = 8
			WHERE [ID] = @minID
		END

		
		SET @minID = 0
		SET @maxID = 0
		SET @minStatus = NULL
		SET @maxStatus = NULL
		DELETE FROM #CamTrapIDValidated WHERE [ID] = @idForAround
		SELECT TOP 1 @idForAround = [ID] FROM #CamTrapIDValidated
		END


		/*******
		--validation forcé 
		PRINT('Nb id in compelled validated (when validated = 1 or null)')
		UPDATE [V_TcameraTrap]
		SET [validated] = 8
		WHERE [pk_id] in (SELECT [ID] FROM #CamTrapIDForSession) AND ([validated] IS NULL OR [validated] = 1 )
		*******/

		-- TODO Gestion si pas de session
		IF NOT EXISTS (SELECT * FROM #CamTrapID)
		RETURN

		--select * from V_dataCamTrap_With_equipSite  where pk_id  in (select ID FROM #CamTrapID) 


		-- Récupération des Tags
		IF OBJECT_ID('tempdb..#TagvsCamTrap') IS NOT NULL
			DROP TABLE #TagvsCamTrap
		
		PRINT('Nb Tags from sessions ')
		SELECT t.pk_id,N.C.value('.','varchar(100)') Tag 
		INTO #TagvsCamTrap
		FROM [V_TcameraTrap] T
		CROSS APPLY tags.nodes('//TAGS/TAG') N(C)
		WHERE T.[pk_id] in (SELECT ID FROM #CamTrapID)

		--select * from #TagvsCamTrap

		-- Création des tags manquants
		PRINT('Nb new Tags inserted :')
		INSERT INTO [Tags]
			   ([Label])
		SELECT DISTINCT Tag FROM #TagvsCamTrap CT
		WHERE NOT EXISTS (SELECT * FROM [Tags] T WHERE t.[Label] = CT.[Tag]) 


			----------------- INSERTIONS-------------------
		PRINT('Nb photos inserted in '+CONVERT(VARCHAR, DB_NAME()))
		INSERT INTO [dbo].[Photos]
			   (
				[Path],
				[FileName],
				[Date],
				[Fk_MonitoredSite],
				[old_id],
				[Statut],
				[Note]
			   )
		SELECT 
		T.[path],
		T.[name],
		T.[date_creation],
		V.[FK_MonitoredSite],
		T.[pk_id],
        T.[validated], 
		T.[Note]
		FROM [V_TcameraTrap] T 
		JOIN [V_dataCamTrap_With_equipSite] V ON V.[pk_id] = T.[pk_id]
		WHERE 
		T.[pk_id] IN ( SELECT CID.[ID] FROM #CamTrapID CID )
		AND (T.[validated] & 10) > 0
		--binary weight 1 underterminate 2 accepted 4 refused 8 forced validate
		SET @nb_insert = @@ROWCOUNT;

		PRINT('Nb link between photos and tags')
		INSERT INTO [dbo].[PhotosTags]
			   ([Fk_Tags]
			   ,[Fk_Photos])
		SELECT 
		T.[ID],
        P.[ID] 
		FROM [Photos] P  
		JOIN #TagvsCamTrap TCT ON TCT.[pk_id] = P.[old_id] 
		JOIN Tags T ON T.[Label] = TCT.[Tag] 
		


			----------------- fix la session -------------------
		PRINT('Nb rows checked :')
		--fix le checked a 1 pour valider la session
		UPDATE [V_TcameraTrap]
		SET [checked] = 1
		WHERE [pk_id] IN (SELECT [ID] FROM #CamTrapID)

		-------------------- gestion des stations et protocoles ------------------------

		IF OBJECT_ID('tempdb..#stationsIds') IS NOT NULL
			DROP TABLE #stationsIds

		PRINT('Nb stations pending from this session')
		SELECT 
		T.[stationID] AS Id  
		INTO #stationsIds 
		FROM [V_TcameraTrap] T 
		WHERE 
		T.[validated] != 4
		AND T.[stationID] IS NOT NULL

		PRINT('Nb stations to standard type :')
			---- STATIONS PENDING TO STANDARD
		UPDATE [dbo].[Station]
			SET [FK_StationType] = 1
			WHERE [ID] IN ( SELECT T.[stationID] FROM [V_TcameraTrap] T WHERE T.[validated] != 4 AND T.[stationID] IS NOT NULL )

			---- STATIONS PENDING DELETED 
			-- NO DELETE CASCADE WE HANDLE MANUALLY REMOVE FK IN STATION ROW
			-- ONLY STATION ARE CREATED FROM STEP VALIDATE
			-- SO WE JUST HAVE TO REMOVE STATION_FIELDWORKER
		PRINT('REMOVING PENDING STATIONS')
		PRINT('Remove link between stations and fieldworker :')
		
		DELETE SF
		FROM [Station_FieldWorker] SF
		JOIN [Station] S ON SF.[FK_Station] = S.[ID]
		WHERE 
		S.[ID] IN (SELECT T.[stationID] FROM [V_TcameraTrap] T WHERE T.[validated] = 4 AND T.[stationID] IS NOT NULL)

		PRINT('Nb stations removed :')
		DELETE S
		FROM [Station] S 
		WHERE [ID] IN ( SELECT T.[stationID] FROM [V_TcameraTrap] T WHERE T.[validated] = 4 AND T.[stationID] IS NOT NULL)



		------------------ gestion des protocoles associés -----------------------------
		-- suivant les tags associés et autres 
		






		

		-- Test gestion erreur RAISERROR (' Erreur générée', -- Message text.  15, -- Severity,    1)

	IF @@TRANCOUNT > 0 		
			SELECT @nb_insert AS nbInserted;
			COMMIT TRAN
			
			/*set @exist = 0
			set @error = 0*/
	--

	END TRY
    BEGIN CATCH
        print 'CATCH'
        print @@TRANCOUNT
        IF @@TRANCOUNT > 0  ROLLBACK TRAN;
        print @@TRANCOUNT
                   
        DECLARE @ErrorMessage NVARCHAR(4000);
        DECLARE @ErrorSeverity INT;
        DECLARE @ErrorState INT;
                   
        SELECT
                @ErrorMessage = ERROR_MESSAGE(),
                @ErrorSeverity = ERROR_SEVERITY(),
                @ErrorState = ERROR_STATE();
                   
        RAISERROR (@ErrorMessage, -- Message text.
                            @ErrorSeverity, -- Severity.
                            @ErrorState -- State.
                            );
    END CATCH

	--select path,name,validated from V_TcameraTrap where pk_id in (select ID from #CamTrapID)
END


INSERT INTO [dbo].[TVersion] (TVer_FileName,TVer_Date,TVer_DbName) VALUES ('187_ALTER_pr_ValidateCameraTrapSession',GETDATE(),(SELECT db_name()))


GO
